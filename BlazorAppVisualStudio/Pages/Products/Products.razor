@page "/products"

@using BlazorAppVisualStudio.Models
@using BlazorAppVisualStudio.Services.Interfaces

@inject ILogger<Products> logger
@inject IProductServices _productServices
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@inject IToastService toastService


<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products" />

<button class="btn btn-dark"
        @onclick="@(() => _navigationManager.NavigateTo("/addProducts"))">Add Products</button>

@if (products?.Count > 0)
{
    <div class="products-container">
        @foreach(var product in products)
        {
            <div class="card">
                <img 
                    class="card-img-top" 
                    src="@product.Images[0]" 
                    alt="product" 
                    loading="lazy" 
                    width="270" 
                    height="210" 
                />

                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price?.ToString("C")</p>
                    <button
                        title="delete"
                        class="btn btn-danger btn-delete"
                        @onclick="@(() => DeleteProduct(product))"
                    >
                        <span class="oi oi-trash"></span>
                    </button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No hay productos para mostrar.</p>
}


@code {

    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    private async Task GetProducts()
    {
        products = await _productServices.Get();
    }

    private async Task DeleteProduct(Product product)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {product.Title}"))
            return;

        await _productServices.Delete(product.Id);
        toastService.ShowSuccess("Producto eliminado");
        await GetProducts();
    }

}
